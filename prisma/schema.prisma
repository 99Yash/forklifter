// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider   = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String         @unique @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  image         String?
  oneLiner      String?
  bio           String?
  twitterUrl    String?
  githubUrl     String?
  linkedinUrl   String?
  accounts      Account[]
  sessions      Session[]
  experiences   Experience[]
  testimonials  Testimonial[]
  contributions Contribution[]
  projects      Project[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Testimonial {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  author      String     // Name of the employer / client (eg. Robert Crawford)
  authorUrl   String    // LinkedIn or Twitter or anything for the contact of the Author
  designation String   // (eg. Sr. Computer Scientist @ Adobe California)
  message     String  // Message from the employer / client
  userId      String @db.ObjectId
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contribution {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orgName     String
  orgUrl      String
  description String
  tags        String[] // OSSTags have been defined to be a specific set of Strings in constants.ts
  url         String   // URL of the Contribution >>> https://github.com/org/repo/pulls/yourgithubusername
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  // add an image (screenshot) if possible, use uploadThing for those things
  webUrl      String
  githubUrl   String
  userId      String   @db.ObjectId
  techStack   String[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  position         String
  orgName          String
  orgUrl           String
  startDate        DateTime
  endDate          DateTime?
  currentlyWorking Boolean
  description      String
  userId           String    @db.ObjectId
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
}
